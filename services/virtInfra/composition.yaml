apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: virt-infra
spec:
  compositeTypeRef:
    apiVersion: dnacloud.home/v1alpha1
    kind: xvirtInfra
  mode: Pipeline
  # environment:
  #   environmentConfigs:
  #     - type: Reference
  #       ref:
  #         apiVersion: fn.crossplane.io/v1beta1
  #         kind: Function
  #         name: function-go-templating
  pipeline:
  - step: create-vm
    functionRef:
      name: function-go-templating
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      inline:
        template: |-
          ---
          {{ $xr := getCompositeResource . }}
          
          {{ core_count := $xr.spec.compute.cpu.core_count }}
          {{ memory := $xr.spec.compute.cpu.memory }}
          {{ socket := $xr.spec.compute.cpu.socket }}
          {{ cpu_type := $xr.spec.compute.cpu.cpu_type }}
          {{ interface := $xr.spec.compute.disk.interface }}
          {{ datastore_id := $xr.spec.compute.disk.datastore_id }}
          {{ iothread := $xr.spec.compute.disk.iothread }}
          {{ disk_size := $xr.spec.compute.disk.size }}
          {{ ipv4 := $xr.spec.compute.network.ipv4_addr }}
          {{ gateway := $xr.spec.compute.network.gateway }}
          {{ bridge := $xr.spec.compute.network.bridge }}
          {{ network_model := $xr.spec.compute.network.model }}
          {{ vm_id := $xr.spec.vmdetails.id }}
          {{ vm_name := $xr.spec.vmdetails.vmname }}
          {{ vm_username := $xr.spec.vmdetails.username }}
          {{ vm_password := $xr.spec.vmdetails.password }}
          
          ---
          apiVersion: tf.upbound.io/v1beta1
          kind: Workspace
          metadata:
            name: vm-{{ .metadata.name }}
          spec:
            forProvider:
              module: |
                terraform {
                    required_providers {
                      proxmox = {
                        source = "bpg/proxmox"
                      version = "~> 0.62.0"
                      }
                    }
                }

                provider "proxmox" {
                    endpoint = https://192.168.0.66:8006/api2/json
                    api_token = "root@pam!auto_vm=b6b05fae-cddc-4749-be2a-5517b61cd36a"
                    insecure = true
                    ssh {
                      agent = true
                      username = {{ $vm_username }}
                      private_key = file("~/.ssh/id_rsa")
                  }
                    
                }

                data "local_file" "ssh_public_key" {
                  count = var.public_key_path != null ? 1 : 0
                  filename = "~/.ssh/id_rsa.pub"
                }

                resource "proxmox_virtual_environment_vm" "pv-1" {
                    name        = {{ $vm_name }}
                    vm_id       = {{ $vm_id }}
                    node_name   = pv-node1
                    cpu {
                      cores   = {{ $core_count }}
                      sockets = {{ $socket }}
                      type    = {{ $cpu_type }}  
                  }
                  efi_disk {
                    datastore_id = {{ $datastore_id }}
                    type         = "4m"
                  }
                  memory {
                    dedicated = {{ $memory }}
                  }
                  disk {
                    file_id      = proxmox_virtual_environment_download_file.ubuntu_cloud_image.id
                    interface    = {{ $interface }}     
                    datastore_id = {{ $datastore_id }}  
                    size         = {{ $disk_size }}  
                    iothread     = {{ $iothread }}        
                    file_format  = "raw"
                  }
                  # agent {
                  #   enabled = true  # Matches agent = 1
                  # }
                  scsi_hardware = "virtio-scsi-pci"
                  
                  initialization {
                    ip_config {
                      ipv4 {
                        address = {{ $ipv4 }}
                        gateway = {{ $gateway }}
                      }
                    }
                    user_account {
                      username = {{ $vm_username }} 
                      password =  {{ $vm_password }}
                      keys = var.public_key_path != null ? [trimspace(data.local_file.ssh_public_key[0].content)] : []
                    }
                  }
                  
                  network_device {
                      model = {{ $network_model }}
                      bridge = {{ $bridge }}
                  }
                  lifecycle {
                      ignore_changes = [network_device]
                  }
                }

                resource "proxmox_virtual_environment_download_file" "ubuntu_cloud_image" {
                  content_type = "iso"
                  datastore_id = {{ $datastore_id }}
                  node_name    = {{ $vm_name }}

                  url = "https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img"
                }
  # - step: automatically-detect-ready-composed-resources
  #   functionRef:
  #       name: function-auto-ready

